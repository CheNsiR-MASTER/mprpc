// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fixbug {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* resultCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  resultCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* User_Sex_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendListResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* UserServiceRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, pwd_),
  };
  LoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _is_default_instance_));
  resultCode_descriptor_ = file->message_type(1);
  static const int resultCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultCode, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultCode, errormsg_),
  };
  resultCode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      resultCode_descriptor_,
      resultCode::default_instance_,
      resultCode_offsets_,
      -1,
      -1,
      -1,
      sizeof(resultCode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultCode, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(resultCode, _is_default_instance_));
  LoginResponse_descriptor_ = file->message_type(2);
  static const int LoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, r1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, success_),
  };
  LoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _is_default_instance_));
  User_descriptor_ = file->message_type(3);
  static const int User_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, sex_),
  };
  User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      -1,
      -1,
      -1,
      sizeof(User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _is_default_instance_));
  User_Sex_descriptor_ = User_descriptor_->enum_type(0);
  GetFriendRequest_descriptor_ = file->message_type(4);
  static const int GetFriendRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRequest, userid_),
  };
  GetFriendRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetFriendRequest_descriptor_,
      GetFriendRequest::default_instance_,
      GetFriendRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetFriendRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendRequest, _is_default_instance_));
  GetFriendListResponse_descriptor_ = file->message_type(5);
  static const int GetFriendListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, friend_list_),
  };
  GetFriendListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetFriendListResponse_descriptor_,
      GetFriendListResponse::default_instance_,
      GetFriendListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetFriendListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _is_default_instance_));
  UserServiceRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      resultCode_descriptor_, &resultCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetFriendRequest_descriptor_, &GetFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetFriendListResponse_descriptor_, &GetFriendListResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete resultCode::default_instance_;
  delete resultCode_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete GetFriendRequest::default_instance_;
  delete GetFriendRequest_reflection_;
  delete GetFriendListResponse::default_instance_;
  delete GetFriendListResponse_reflection_;
}

void protobuf_AddDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\006fixbug\")\n\014LoginRequest\022\014\n\004"
    "name\030\001 \001(\014\022\013\n\003pwd\030\002 \001(\014\"1\n\nresultCode\022\021\n"
    "\terrorcode\030\001 \001(\005\022\020\n\010errorMsg\030\002 \001(\014\"@\n\rLo"
    "ginResponse\022\036\n\002r1\030\001 \001(\0132\022.fixbug.resultC"
    "ode\022\017\n\007success\030\002 \001(\014\"[\n\004User\022\014\n\004name\030\001 \001"
    "(\014\022\013\n\003age\030\002 \001(\r\022\035\n\003sex\030\003 \001(\0162\020.fixbug.Us"
    "er.Sex\"\031\n\003Sex\022\007\n\003MAN\020\000\022\t\n\005WOMAN\020\001\"\"\n\020Get"
    "FriendRequest\022\016\n\006userId\030\001 \001(\r\"^\n\025GetFrie"
    "ndListResponse\022\"\n\006result\030\001 \001(\0132\022.fixbug."
    "resultCode\022!\n\013friend_list\030\002 \003(\0132\014.fixbug"
    ".User2\221\001\n\016UserServiceRpc\0224\n\005Login\022\024.fixb"
    "ug.LoginRequest\032\025.fixbug.LoginResponse\022I"
    "\n\016GetFriendLists\022\030.fixbug.GetFriendReque"
    "st\032\035.fixbug.GetFriendListResponseB\003\200\001\001b\006"
    "proto3", 566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  resultCode::default_instance_ = new resultCode();
  LoginResponse::default_instance_ = new LoginResponse();
  User::default_instance_ = new User();
  GetFriendRequest::default_instance_ = new GetFriendRequest();
  GetFriendListResponse::default_instance_ = new GetFriendListResponse();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  resultCode::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  GetFriendRequest::default_instance_->InitAsDefaultInstance();
  GetFriendListResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kNameFieldNumber;
const int LoginRequest::kPwdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fixbug.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fixbug.LoginRequest)
}

void LoginRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:fixbug.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.LoginRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fixbug.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // optional bytes pwd = 2;
      case 2: {
        if (tag == 18) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pwd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fixbug.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fixbug.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fixbug.LoginRequest)
  // optional bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes pwd = 2;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pwd(), output);
  }

  // @@protoc_insertion_point(serialize_end:fixbug.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.LoginRequest)
  // optional bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes pwd = 2;
  if (this->pwd().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pwd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fixbug.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.LoginRequest)
  int total_size = 0;

  // optional bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // optional bytes pwd = 2;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pwd());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  name_.Swap(&other->name_);
  pwd_.Swap(&other->pwd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional bytes name = 1;
void LoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.LoginRequest.name)
}
 void LoginRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.LoginRequest.name)
}
 void LoginRequest::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.LoginRequest.name)
}
 ::std::string* LoginRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.LoginRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:fixbug.LoginRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginRequest.name)
}

// optional bytes pwd = 2;
void LoginRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::pwd() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginRequest.pwd)
  return pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.LoginRequest.pwd)
}
 void LoginRequest::set_pwd(const char* value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.LoginRequest.pwd)
}
 void LoginRequest::set_pwd(const void* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.LoginRequest.pwd)
}
 ::std::string* LoginRequest::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.LoginRequest.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:fixbug.LoginRequest.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginRequest.pwd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int resultCode::kErrorcodeFieldNumber;
const int resultCode::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

resultCode::resultCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fixbug.resultCode)
}

void resultCode::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

resultCode::resultCode(const resultCode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fixbug.resultCode)
}

void resultCode::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 0;
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

resultCode::~resultCode() {
  // @@protoc_insertion_point(destructor:fixbug.resultCode)
  SharedDtor();
}

void resultCode::SharedDtor() {
  errormsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void resultCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* resultCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return resultCode_descriptor_;
}

const resultCode& resultCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

resultCode* resultCode::default_instance_ = NULL;

resultCode* resultCode::New(::google::protobuf::Arena* arena) const {
  resultCode* n = new resultCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void resultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.resultCode)
  errorcode_ = 0;
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool resultCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fixbug.resultCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errorcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errorMsg;
        break;
      }

      // optional bytes errorMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errormsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fixbug.resultCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fixbug.resultCode)
  return false;
#undef DO_
}

void resultCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fixbug.resultCode)
  // optional int32 errorcode = 1;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional bytes errorMsg = 2;
  if (this->errormsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->errormsg(), output);
  }

  // @@protoc_insertion_point(serialize_end:fixbug.resultCode)
}

::google::protobuf::uint8* resultCode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.resultCode)
  // optional int32 errorcode = 1;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes errorMsg = 2;
  if (this->errormsg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->errormsg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fixbug.resultCode)
  return target;
}

int resultCode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.resultCode)
  int total_size = 0;

  // optional int32 errorcode = 1;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional bytes errorMsg = 2;
  if (this->errormsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->errormsg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void resultCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.resultCode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const resultCode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const resultCode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.resultCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.resultCode)
    MergeFrom(*source);
  }
}

void resultCode::MergeFrom(const resultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.resultCode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.errormsg().size() > 0) {

    errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
  }
}

void resultCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.resultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void resultCode::CopyFrom(const resultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.resultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool resultCode::IsInitialized() const {

  return true;
}

void resultCode::Swap(resultCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void resultCode::InternalSwap(resultCode* other) {
  std::swap(errorcode_, other->errorcode_);
  errormsg_.Swap(&other->errormsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata resultCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = resultCode_descriptor_;
  metadata.reflection = resultCode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// resultCode

// optional int32 errorcode = 1;
void resultCode::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 resultCode::errorcode() const {
  // @@protoc_insertion_point(field_get:fixbug.resultCode.errorcode)
  return errorcode_;
}
 void resultCode::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:fixbug.resultCode.errorcode)
}

// optional bytes errorMsg = 2;
void resultCode::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& resultCode::errormsg() const {
  // @@protoc_insertion_point(field_get:fixbug.resultCode.errorMsg)
  return errormsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void resultCode::set_errormsg(const ::std::string& value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.resultCode.errorMsg)
}
 void resultCode::set_errormsg(const char* value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.resultCode.errorMsg)
}
 void resultCode::set_errormsg(const void* value, size_t size) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.resultCode.errorMsg)
}
 ::std::string* resultCode::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.resultCode.errorMsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* resultCode::release_errormsg() {
  // @@protoc_insertion_point(field_release:fixbug.resultCode.errorMsg)
  
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void resultCode::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:fixbug.resultCode.errorMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kR1FieldNumber;
const int LoginResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fixbug.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  r1_ = const_cast< ::fixbug::resultCode*>(&::fixbug::resultCode::default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fixbug.LoginResponse)
}

void LoginResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  r1_ = NULL;
  success_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:fixbug.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  success_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete r1_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.LoginResponse)
  if (GetArenaNoVirtual() == NULL && r1_ != NULL) delete r1_;
  r1_ = NULL;
  success_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fixbug.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fixbug.resultCode r1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_success;
        break;
      }

      // optional bytes success = 2;
      case 2: {
        if (tag == 18) {
         parse_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fixbug.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fixbug.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fixbug.LoginResponse)
  // optional .fixbug.resultCode r1 = 1;
  if (this->has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->r1_, output);
  }

  // optional bytes success = 2;
  if (this->success().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:fixbug.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.LoginResponse)
  // optional .fixbug.resultCode r1 = 1;
  if (this->has_r1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->r1_, false, target);
  }

  // optional bytes success = 2;
  if (this->success().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fixbug.LoginResponse)
  return target;
}

int LoginResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.LoginResponse)
  int total_size = 0;

  // optional .fixbug.resultCode r1 = 1;
  if (this->has_r1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->r1_);
  }

  // optional bytes success = 2;
  if (this->success().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->success());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_r1()) {
    mutable_r1()->::fixbug::resultCode::MergeFrom(from.r1());
  }
  if (from.success().size() > 0) {

    success_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.success_);
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  std::swap(r1_, other->r1_);
  success_.Swap(&other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional .fixbug.resultCode r1 = 1;
bool LoginResponse::has_r1() const {
  return !_is_default_instance_ && r1_ != NULL;
}
void LoginResponse::clear_r1() {
  if (GetArenaNoVirtual() == NULL && r1_ != NULL) delete r1_;
  r1_ = NULL;
}
const ::fixbug::resultCode& LoginResponse::r1() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginResponse.r1)
  return r1_ != NULL ? *r1_ : *default_instance_->r1_;
}
::fixbug::resultCode* LoginResponse::mutable_r1() {
  
  if (r1_ == NULL) {
    r1_ = new ::fixbug::resultCode;
  }
  // @@protoc_insertion_point(field_mutable:fixbug.LoginResponse.r1)
  return r1_;
}
::fixbug::resultCode* LoginResponse::release_r1() {
  // @@protoc_insertion_point(field_release:fixbug.LoginResponse.r1)
  
  ::fixbug::resultCode* temp = r1_;
  r1_ = NULL;
  return temp;
}
void LoginResponse::set_allocated_r1(::fixbug::resultCode* r1) {
  delete r1_;
  r1_ = r1;
  if (r1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginResponse.r1)
}

// optional bytes success = 2;
void LoginResponse::clear_success() {
  success_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginResponse::success() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginResponse.success)
  return success_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_success(const ::std::string& value) {
  
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.LoginResponse.success)
}
 void LoginResponse::set_success(const char* value) {
  
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.LoginResponse.success)
}
 void LoginResponse::set_success(const void* value, size_t size) {
  
  success_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.LoginResponse.success)
}
 ::std::string* LoginResponse::mutable_success() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.LoginResponse.success)
  return success_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginResponse::release_success() {
  // @@protoc_insertion_point(field_release:fixbug.LoginResponse.success)
  
  return success_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResponse::set_allocated_success(::std::string* success) {
  if (success != NULL) {
    
  } else {
    
  }
  success_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), success);
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginResponse.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* User_Sex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_Sex_descriptor_;
}
bool User_Sex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const User_Sex User::MAN;
const User_Sex User::WOMAN;
const User_Sex User::Sex_MIN;
const User_Sex User::Sex_MAX;
const int User::Sex_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kNameFieldNumber;
const int User::kAgeFieldNumber;
const int User::kSexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fixbug.User)
}

void User::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

User::User(const User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fixbug.User)
}

void User::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0u;
  sex_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:fixbug.User)
  SharedDtor();
}

void User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.User)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(User, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<User*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(age_, sex_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fixbug.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_age;
        break;
      }

      // optional uint32 age = 2;
      case 2: {
        if (tag == 16) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional .fixbug.User.Sex sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sex(static_cast< ::fixbug::User_Sex >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fixbug.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fixbug.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fixbug.User)
  // optional bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 age = 2;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->age(), output);
  }

  // optional .fixbug.User.Sex sex = 3;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sex(), output);
  }

  // @@protoc_insertion_point(serialize_end:fixbug.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.User)
  // optional bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional uint32 age = 2;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->age(), target);
  }

  // optional .fixbug.User.Sex sex = 3;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fixbug.User)
  return target;
}

int User::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.User)
  int total_size = 0;

  // optional bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // optional uint32 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->age());
  }

  // optional .fixbug.User.Sex sex = 3;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const User* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {

  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  name_.Swap(&other->name_);
  std::swap(age_, other->age_);
  std::swap(sex_, other->sex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// optional bytes name = 1;
void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:fixbug.User.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.User.name)
}
 void User::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.User.name)
}
 void User::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.User.name)
}
 ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:fixbug.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fixbug.User.name)
}

// optional uint32 age = 2;
void User::clear_age() {
  age_ = 0u;
}
 ::google::protobuf::uint32 User::age() const {
  // @@protoc_insertion_point(field_get:fixbug.User.age)
  return age_;
}
 void User::set_age(::google::protobuf::uint32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:fixbug.User.age)
}

// optional .fixbug.User.Sex sex = 3;
void User::clear_sex() {
  sex_ = 0;
}
 ::fixbug::User_Sex User::sex() const {
  // @@protoc_insertion_point(field_get:fixbug.User.sex)
  return static_cast< ::fixbug::User_Sex >(sex_);
}
 void User::set_sex(::fixbug::User_Sex value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:fixbug.User.sex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFriendRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFriendRequest::GetFriendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fixbug.GetFriendRequest)
}

void GetFriendRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetFriendRequest::GetFriendRequest(const GetFriendRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fixbug.GetFriendRequest)
}

void GetFriendRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userid_ = 0u;
}

GetFriendRequest::~GetFriendRequest() {
  // @@protoc_insertion_point(destructor:fixbug.GetFriendRequest)
  SharedDtor();
}

void GetFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendRequest_descriptor_;
}

const GetFriendRequest& GetFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

GetFriendRequest* GetFriendRequest::default_instance_ = NULL;

GetFriendRequest* GetFriendRequest::New(::google::protobuf::Arena* arena) const {
  GetFriendRequest* n = new GetFriendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.GetFriendRequest)
  userid_ = 0u;
}

bool GetFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fixbug.GetFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fixbug.GetFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fixbug.GetFriendRequest)
  return false;
#undef DO_
}

void GetFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fixbug.GetFriendRequest)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:fixbug.GetFriendRequest)
}

::google::protobuf::uint8* GetFriendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.GetFriendRequest)
  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fixbug.GetFriendRequest)
  return target;
}

int GetFriendRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.GetFriendRequest)
  int total_size = 0;

  // optional uint32 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.GetFriendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetFriendRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFriendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.GetFriendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.GetFriendRequest)
    MergeFrom(*source);
  }
}

void GetFriendRequest::MergeFrom(const GetFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.GetFriendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void GetFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.GetFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendRequest::CopyFrom(const GetFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.GetFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendRequest::IsInitialized() const {

  return true;
}

void GetFriendRequest::Swap(GetFriendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFriendRequest::InternalSwap(GetFriendRequest* other) {
  std::swap(userid_, other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendRequest_descriptor_;
  metadata.reflection = GetFriendRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFriendRequest

// optional uint32 userId = 1;
void GetFriendRequest::clear_userid() {
  userid_ = 0u;
}
 ::google::protobuf::uint32 GetFriendRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendRequest.userId)
  return userid_;
}
 void GetFriendRequest::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:fixbug.GetFriendRequest.userId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFriendListResponse::kResultFieldNumber;
const int GetFriendListResponse::kFriendListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFriendListResponse::GetFriendListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fixbug.GetFriendListResponse)
}

void GetFriendListResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  result_ = const_cast< ::fixbug::resultCode*>(&::fixbug::resultCode::default_instance());
}

GetFriendListResponse::GetFriendListResponse(const GetFriendListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fixbug.GetFriendListResponse)
}

void GetFriendListResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = NULL;
}

GetFriendListResponse::~GetFriendListResponse() {
  // @@protoc_insertion_point(destructor:fixbug.GetFriendListResponse)
  SharedDtor();
}

void GetFriendListResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void GetFriendListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendListResponse_descriptor_;
}

const GetFriendListResponse& GetFriendListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

GetFriendListResponse* GetFriendListResponse::default_instance_ = NULL;

GetFriendListResponse* GetFriendListResponse::New(::google::protobuf::Arena* arena) const {
  GetFriendListResponse* n = new GetFriendListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFriendListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.GetFriendListResponse)
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
  friend_list_.Clear();
}

bool GetFriendListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fixbug.GetFriendListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fixbug.resultCode result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friend_list;
        break;
      }

      // repeated .fixbug.User friend_list = 2;
      case 2: {
        if (tag == 18) {
         parse_friend_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_friend_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fixbug.GetFriendListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fixbug.GetFriendListResponse)
  return false;
#undef DO_
}

void GetFriendListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fixbug.GetFriendListResponse)
  // optional .fixbug.resultCode result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // repeated .fixbug.User friend_list = 2;
  for (unsigned int i = 0, n = this->friend_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:fixbug.GetFriendListResponse)
}

::google::protobuf::uint8* GetFriendListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.GetFriendListResponse)
  // optional .fixbug.resultCode result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->result_, false, target);
  }

  // repeated .fixbug.User friend_list = 2;
  for (unsigned int i = 0, n = this->friend_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->friend_list(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fixbug.GetFriendListResponse)
  return target;
}

int GetFriendListResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.GetFriendListResponse)
  int total_size = 0;

  // optional .fixbug.resultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  // repeated .fixbug.User friend_list = 2;
  total_size += 1 * this->friend_list_size();
  for (int i = 0; i < this->friend_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.GetFriendListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetFriendListResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFriendListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.GetFriendListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.GetFriendListResponse)
    MergeFrom(*source);
  }
}

void GetFriendListResponse::MergeFrom(const GetFriendListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.GetFriendListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  friend_list_.MergeFrom(from.friend_list_);
  if (from.has_result()) {
    mutable_result()->::fixbug::resultCode::MergeFrom(from.result());
  }
}

void GetFriendListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.GetFriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListResponse::CopyFrom(const GetFriendListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.GetFriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListResponse::IsInitialized() const {

  return true;
}

void GetFriendListResponse::Swap(GetFriendListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFriendListResponse::InternalSwap(GetFriendListResponse* other) {
  std::swap(result_, other->result_);
  friend_list_.UnsafeArenaSwap(&other->friend_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFriendListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendListResponse_descriptor_;
  metadata.reflection = GetFriendListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFriendListResponse

// optional .fixbug.resultCode result = 1;
bool GetFriendListResponse::has_result() const {
  return !_is_default_instance_ && result_ != NULL;
}
void GetFriendListResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::fixbug::resultCode& GetFriendListResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendListResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::fixbug::resultCode* GetFriendListResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::fixbug::resultCode;
  }
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendListResponse.result)
  return result_;
}
::fixbug::resultCode* GetFriendListResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.GetFriendListResponse.result)
  
  ::fixbug::resultCode* temp = result_;
  result_ = NULL;
  return temp;
}
void GetFriendListResponse::set_allocated_result(::fixbug::resultCode* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fixbug.GetFriendListResponse.result)
}

// repeated .fixbug.User friend_list = 2;
int GetFriendListResponse::friend_list_size() const {
  return friend_list_.size();
}
void GetFriendListResponse::clear_friend_list() {
  friend_list_.Clear();
}
const ::fixbug::User& GetFriendListResponse::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.GetFriendListResponse.friend_list)
  return friend_list_.Get(index);
}
::fixbug::User* GetFriendListResponse::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.GetFriendListResponse.friend_list)
  return friend_list_.Mutable(index);
}
::fixbug::User* GetFriendListResponse::add_friend_list() {
  // @@protoc_insertion_point(field_add:fixbug.GetFriendListResponse.friend_list)
  return friend_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::fixbug::User >*
GetFriendListResponse::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.GetFriendListResponse.friend_list)
  return &friend_list_;
}
const ::google::protobuf::RepeatedPtrField< ::fixbug::User >&
GetFriendListResponse::friend_list() const {
  // @@protoc_insertion_point(field_list:fixbug.GetFriendListResponse.friend_list)
  return friend_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

UserServiceRpc::~UserServiceRpc() {}

const ::google::protobuf::ServiceDescriptor* UserServiceRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserServiceRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* UserServiceRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserServiceRpc_descriptor_;
}

void UserServiceRpc::Login(::google::protobuf::RpcController* controller,
                         const ::fixbug::LoginRequest*,
                         ::fixbug::LoginResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Login() not implemented.");
  done->Run();
}

void UserServiceRpc::GetFriendLists(::google::protobuf::RpcController* controller,
                         const ::fixbug::GetFriendRequest*,
                         ::fixbug::GetFriendListResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendLists() not implemented.");
  done->Run();
}

void UserServiceRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), UserServiceRpc_descriptor_);
  switch(method->index()) {
    case 0:
      Login(controller,
             ::google::protobuf::down_cast<const ::fixbug::LoginRequest*>(request),
             ::google::protobuf::down_cast< ::fixbug::LoginResponse*>(response),
             done);
      break;
    case 1:
      GetFriendLists(controller,
             ::google::protobuf::down_cast<const ::fixbug::GetFriendRequest*>(request),
             ::google::protobuf::down_cast< ::fixbug::GetFriendListResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& UserServiceRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::LoginRequest::default_instance();
    case 1:
      return ::fixbug::GetFriendRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& UserServiceRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::LoginResponse::default_instance();
    case 1:
      return ::fixbug::GetFriendListResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserServiceRpc_Stub::UserServiceRpc_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserServiceRpc_Stub::UserServiceRpc_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
UserServiceRpc_Stub::~UserServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void UserServiceRpc_Stub::Login(::google::protobuf::RpcController* controller,
                              const ::fixbug::LoginRequest* request,
                              ::fixbug::LoginResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserServiceRpc_Stub::GetFriendLists(::google::protobuf::RpcController* controller,
                              const ::fixbug::GetFriendRequest* request,
                              ::fixbug::GetFriendListResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)
